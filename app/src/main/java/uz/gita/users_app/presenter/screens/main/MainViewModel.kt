package uz.gita.users_app.presenter.screens.mainimport androidx.lifecycle.ViewModelimport androidx.lifecycle.viewModelScopeimport dagger.hilt.android.lifecycle.HiltViewModelimport kotlinx.coroutines.Dispatchersimport kotlinx.coroutines.flow.MutableStateFlowimport kotlinx.coroutines.flow.collectimport kotlinx.coroutines.flow.onEachimport kotlinx.coroutines.flow.updateimport kotlinx.coroutines.launchimport kotlinx.coroutines.withContextimport uz.gita.users_app.domain.usecase.UsersUseCaseimport javax.inject.Inject@HiltViewModelclass MainViewModel @Inject constructor(    private val useCase: UsersUseCase,    private val direction: MainDirection,) : MainContract.ViewModel, ViewModel() {    override val uiState = MutableStateFlow(MainContract.UIState())    override fun onEventDispatcher(intent: MainContract.Intent) {        when (intent) {            is MainContract.Intent.MoveToDetail -> {                viewModelScope.launch {                    direction.moveToDetail(intent.usersModel)                }            }        }    }    init {        viewModelScope.launch {            withContext(Dispatchers.IO) {                useCase.invoke().onEach {                    uiState.update { uiState ->                        uiState.copy(userList = it)                    }                }            }.collect()        }    }}