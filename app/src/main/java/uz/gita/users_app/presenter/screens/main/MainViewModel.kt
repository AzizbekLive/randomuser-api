package uz.gita.users_app.presenter.screens.mainimport androidx.lifecycle.ViewModelimport androidx.lifecycle.viewModelScopeimport dagger.hilt.android.lifecycle.HiltViewModelimport kotlinx.coroutines.Dispatchersimport kotlinx.coroutines.flow.MutableStateFlowimport kotlinx.coroutines.flow.collectimport kotlinx.coroutines.flow.launchInimport kotlinx.coroutines.flow.onEachimport kotlinx.coroutines.flow.updateimport kotlinx.coroutines.launchimport kotlinx.coroutines.withContextimport uz.gita.users_app.domain.usecase.UsersUseCaseimport javax.inject.Inject@HiltViewModelclass MainViewModel @Inject constructor(    private val useCase: UsersUseCase,) : MainContract.ViewModel, ViewModel() {    override val uiState = MutableStateFlow(MainContract.UIState())    init {//        useCase.invoke()//            .onEach { uiState.update { uiState -> uiState.copy(userList = it) } }//            .launchIn(viewModelScope)        viewModelScope.launch {            withContext(Dispatchers.IO) {                useCase.invoke().onEach {                    uiState.update { uiState ->                        uiState.copy(userList = it)                    }                }            }.collect()        }    }}