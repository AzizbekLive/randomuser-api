package uz.gita.users_app.presenter.screens.detailimport android.util.Logimport androidx.lifecycle.ViewModelimport androidx.lifecycle.viewModelScopeimport dagger.hilt.android.lifecycle.HiltViewModelimport kotlinx.coroutines.flow.MutableStateFlowimport kotlinx.coroutines.flow.updateimport kotlinx.coroutines.launchimport javax.inject.Inject@HiltViewModelclass DetailViewModel @Inject constructor(    private val detailsDirection: DetailsDirection) : DetailContract.ViewModel, ViewModel() {    override val uiState = MutableStateFlow(DetailContract.UIState())    override fun onEventDispatcher(intent: DetailContract.Intent) {        when(intent) {            is DetailContract.Intent.SetData -> {                uiState.update { it.copy(data = intent.data) }            }            DetailContract.Intent.BackToMain ->{                viewModelScope.launch {                    Log.d("TTT", "onEventDispatcher: IntentBackTo Main")                    detailsDirection.moveToMain()                }            }        }    }}