package uz.gita.users_app.presenter.screens.detailimport androidx.compose.foundation.layout.Columnimport androidx.compose.foundation.layout.Spacerimport androidx.compose.foundation.layout.fillMaxSizeimport androidx.compose.foundation.layout.heightimport androidx.compose.foundation.layout.paddingimport androidx.compose.foundation.layout.sizeimport androidx.compose.foundation.shape.RoundedCornerShapeimport androidx.compose.material3.Textimport androidx.compose.runtime.Composableimport androidx.compose.runtime.collectAsStateimport androidx.compose.ui.Alignmentimport androidx.compose.ui.Modifierimport androidx.compose.ui.draw.clipimport androidx.compose.ui.graphics.Colorimport androidx.compose.ui.text.TextStyleimport androidx.compose.ui.text.font.FontWeightimport androidx.compose.ui.tooling.preview.Previewimport androidx.compose.ui.unit.dpimport androidx.compose.ui.unit.spimport cafe.adriel.voyager.androidx.AndroidScreenimport cafe.adriel.voyager.hilt.getViewModelimport com.bumptech.glide.integration.compose.ExperimentalGlideComposeApiimport com.bumptech.glide.integration.compose.GlideImageimport com.bumptech.glide.integration.compose.placeholderimport uz.gita.users_app.Rimport uz.gita.users_app.data.model.UsersModelimport uz.gita.users_app.ui.theme.WeatherAppThemeclass DetailScreen(private val usersModel: UsersModel) : AndroidScreen() {    @Composable    override fun Content() {        val viewModel: DetailContract.ViewModel = getViewModel<DetailViewModel>()        viewModel::onEventDispatcher.invoke(DetailContract.Intent.setData(usersModel))        WeatherAppTheme {            DetailScreenContent(uiState = viewModel.uiState.collectAsState().value)        }    }}@OptIn(ExperimentalGlideComposeApi::class)@Composablefun DetailScreenContent(    uiState: DetailContract.UIState = DetailContract.UIState(),) {    Column(        modifier = Modifier            .fillMaxSize()            .padding(16.dp),        horizontalAlignment = Alignment.CenterHorizontally,    ) {        GlideImage(            model = uiState.data.picture,            contentDescription = uiState.data.fullName,            modifier = Modifier.clip(shape = RoundedCornerShape(8.dp)).size(250.dp),            loading = placeholder(R.drawable.ic_launcher_foreground),        )        Spacer(modifier = Modifier.height(16.dp))        Text(            text = uiState.data.fullName,            style = TextStyle(                fontSize = 24.sp,                fontWeight = FontWeight.Bold,            ),        )        Spacer(modifier = Modifier.height(8.dp))         Text(            text = "Gender: ${uiState.data.gender}",            style = TextStyle(                fontSize = 16.sp,                color = Color.Gray,            ),        )        Text(            text = "Country: ${uiState.data.country}",            style = TextStyle(                fontSize = 16.sp,                color = Color.Gray,            ),        )        Text(            text = "Email: ${uiState.data.email}",            style = TextStyle(                fontSize = 16.sp,                color = Color.Gray,            ),        )    }}@Composable@Preview(showBackground = true)fun DetailScreenPreview() {    DetailScreenContent()}